# 0-add_integer.txt

This module defines an integer addition function add_integer(a, b=98)

Usage
add_integer returns the value of its two arguements 

::
	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(2, 3)
	5

::
	>>> add_integer(2, -3)
	-1

to check that func works with floats

::
	>>> add_integer(2.9, 0.2)
	2

to check that func works with -ve floats
::
	>>> add_integer(-2.9, -0.2)
	-2

func can work with floats and non floats combined
::
	>>> add_integer(2.3, -3)
	-1

func works if the second arguement is default that is 98

::
	>>> add_integer(2)
	100

Non-numbers

the function expects both arguements are either integers or floats. 
if either arguement is a non-integer and non-float, a TypeError is raised:

::
	>>> add_integer("hello", 3)
	Traceback (most recent call last):
	TypeError: a must be an integer

::
	>>> add_integer(2, "hello")
	Traceback (most recent call last):
	TypeError: b must be an integer

::

	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

::

	>>> add_integer(2.3, None)
	Traceback (most recent call last):
	TypeError: b must be an integer

if both arguements are non-integers and non-floats, a TypeError message is only printed for the first arguement.

::
	>>> add_integer("hello", "there")
	Traceback (most recent call last):
	TypeError: a must be an integer

the function will fail if infinity is provided
::

	>>> add_integer(float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

::
	>>> add_integer(2, float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

and again with NaN numbers
::

	>>> add_integer(float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

::

	>>> add_integer(2, float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer
