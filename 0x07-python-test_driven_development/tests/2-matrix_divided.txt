# 2-matrix_divided.txt

==============================
How to use 2-matrix_divided.py
==============================

the modele defines a matrix division function ``matrix_divided(matrix, div)``.

Usage
=====
the func returns a new matrix that is a copy of the parameter

::
	>>> matrix_divided = __import__('2-matrix_divided').matrix _divided
	>>> matrix = [
	...	[3, 6, 9],
	...	[12, 15,18]
	... ]
	>>> print(matrix_divided(matrix, 3))
	[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

Note that quotients are rounded to a maximum of two decimal places.

::
	>>> matrix = [
	...	[1.1, -2.2, 3.3],
	...	[4.4, 5.5, -6.6]
	... ]
	>>> print(matrix_divided(matrix, 3))
	[[0.37, -0.73, 1.1], [1.47, 1.83, -2.2]]

integers and floats can be combined

::
	>>> matrix = [
	...	[1, -2.2, 3, 4.4, 5],
	...	[-6.6, 7.00, 8, 9.999, 10]
	...	 ]
	>>> print(matrix_divided(matrix, 3))
	[[0.33, -0.73, 1.0, 1.47, 1.67], [-2.2, 2.33, 2.67, 3.33, 3.33]]

invalid matrices
================

the parameter ``matric=x`` must be a list of lists containing either ints or floats. if ``matrix`` is not a list, a TypeError is raised.

::
	>>> matrix = "not a list"
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):	
	TypeError: matrix must be a matrix (listof lists) of integers or floats

::

	>>> matrix = None
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

note that an empty liust wil succeed

::	>>> matrix = [[]]
	>>> print(matrix_divided(matrix, 3))
	[[]]

An identical TypeError is raised if ``matrix`` is not specifically a list of lists.

::
	>>> matrix = [1, 2, 3]
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (lists of lists) of ints and floats

the same TypeError message is raised again if any elements in ``matrix`` are neither ints nor floats

::
	>>> matrix = [
	...	[1, 2, 3],
	...	[4, "not a number", 6]
	... ]
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of ints and floats

Finally, all the rows in matrix must be the same size. if any rows are of different sizes, a new TypeError is raised.

::
	>>> matrix = [
	...	[1, 2, 3, 4],
	...	[5, 6, 7]
	... ]
	>>>print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

invalid divisors
=============

the parameter ``div`` must be either an int or float.otherwise, a TypeError is raised

::
	>>>matrix = [
	...	[1, 2, 3],
	...	[4, 5, 6]
	... ]
	>>> print(matrix_divided(matrix, "not a number""))
	Traceback (most recent call last):
	TypeError: div must be a number

::
	>>> print(matrix_divided(matrix, None))
	Traceback (most recent call last):
	TypeError: div must be a number

``div`` must also be a non-zero. otherwise, raise a ZeroDivisionError

::
	>>> print(matrix_divided(matrix, 0))
	Traceback (most recent call last):
	ZeroDivisionError: division by zero
